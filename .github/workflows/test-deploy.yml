name: Test Deploy to GitHub Packages

on:
  workflow_dispatch:
    inputs:
      version_suffix:
        description: "Test version suffix (e.g., alpha.1, beta.2)"
        required: true
        default: "alpha.1"
        type: string
      dry_run:
        description: "Dry run (don't actually publish)"
        type: boolean
        default: false
      access_level:
        description: "Package access level"
        required: true
        default: "restricted"
        type: choice
        options:
          - restricted
          - public

jobs:
  test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          registry-url: "https://npm.pkg.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Setup GitHub Packages authentication
        run: |
          echo "🔧 Setting up GitHub Packages authentication..."
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          echo "@${REPO_OWNER}:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc
          echo "📋 .npmrc file contents:"
          cat ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify ESLint dependencies
        run: |
          echo "🔍 Checking ESLint dependencies..."
          npm list @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint || echo "⚠️ Some ESLint dependencies missing"
          echo "📁 node_modules/@typescript-eslint contents:"
          ls -la node_modules/@typescript-eslint/ || echo "❌ @typescript-eslint directory not found"

      - name: Run tests
        run: npm run test

      - name: Build project
        run: npm run build

      - name: Verify build outputs
        run: |
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Built index.js file not found!"
            exit 1
          fi
          if [ ! -f "dist/index.d.ts" ]; then
            echo "❌ Built type definition file not found!"
            exit 1
          fi
          echo "✅ Build verification completed!"

      - name: Create test package.json
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TEST_VERSION="${CURRENT_VERSION}-${{ github.event.inputs.version_suffix }}"

          # Create package.json for GitHub Packages with scoped name
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          jq --arg name "@${REPO_OWNER}/prettier-plugin-tailwindcss-normalizer" \
             --arg version "$TEST_VERSION" \
             --arg repo "git+https://github.com/${{ github.repository }}.git" \
             '.name = $name | .version = $version | .repository.url = $repo' \
             package.json > package-gh.json

          mv package-gh.json package.json

          echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_ENV
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
          echo "📦 Test package: @${REPO_OWNER}/prettier-plugin-tailwindcss-normalizer@$TEST_VERSION"

      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🔍 === DRY RUN MODE ==="
          echo "📦 Package name: @${{ env.REPO_OWNER }}/prettier-plugin-tailwindcss-normalizer"
          echo "🏷️  Version: ${{ env.TEST_VERSION }}"
          echo "🔐 Access level: ${{ github.event.inputs.access_level }}"
          echo "📋 Package.json contents:"
          cat package.json
          echo ""
          echo "🚀 Actual deployment was not performed."
          if [ "${{ github.event.inputs.access_level }}" = "public" ]; then
            npm publish --dry-run --registry=https://npm.pkg.github.com --access public
          else
            npm publish --dry-run --registry=https://npm.pkg.github.com
          fi

      - name: Publish to GitHub Packages
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "🚀 Publishing test package to GitHub Packages..."
          echo "📦 @${{ env.REPO_OWNER }}/prettier-plugin-tailwindcss-normalizer@${{ env.TEST_VERSION }}"
          if [ "${{ github.event.inputs.access_level }}" = "public" ]; then
            npm publish --registry=https://npm.pkg.github.com --access public
          else
            npm publish --registry=https://npm.pkg.github.com
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create installation guide
        if: github.event.inputs.dry_run != 'true'
        run: |
          cat << 'EOF' > INSTALL_GUIDE.md
          # 🧪 Test Package Installation Guide

          **Package Access Level:** ${{ github.event.inputs.access_level }}

          ## 1. GitHub Packages Authentication Setup

          Create a `.npmrc` file in your project root:
          ```
          @${{ env.REPO_OWNER }}:registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}
          ```

          ## 2. Generate GitHub Personal Access Token

          1. Go to GitHub Settings → Developer settings → Personal access tokens → Tokens (classic)
          2. Click "Generate new token (classic)"
          3. Select permissions:
             - **For restricted packages (recommended for testing):** 
               - `read:packages`
               - `repo` (full repository access)
             - For public packages: `read:packages` only
          4. Copy the token and set it as an environment variable:
          ```bash
          export GITHUB_TOKEN=your_token_here
          ```

          ## 2-1. Authentication Test (for restricted packages)
          ```bash
          # Test authentication
          npm whoami --registry=https://npm.pkg.github.com
          ```

          ## 3. Install Test Package
          ```bash
          npm install @${{ env.REPO_OWNER }}/prettier-plugin-tailwindcss-normalizer@${{ env.TEST_VERSION }}
          ```

          ## 4. Add to Prettier Configuration
          ```json
          {
            "plugins": ["@${{ env.REPO_OWNER }}/prettier-plugin-tailwindcss-normalizer"]
          }
          ```

          ## 5. Usage Example
          ```jsx
          // Before
          <div className="w-[384px] h-[256px] p-[16px]" />

          // After (formatted with Prettier)
          <div className="w-sm h-64 p-4" />
          ```

          ---
          📅 Deploy time: $(date)
          🏷️  Version: ${{ env.TEST_VERSION }}
          🔗 Repository: https://github.com/${{ github.repository }}
          EOF

          echo "📝 Installation guide has been created:"
          cat INSTALL_GUIDE.md

      - name: Upload installation guide
        if: github.event.inputs.dry_run != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: installation-guide
          path: INSTALL_GUIDE.md

      - name: Notify success
        if: success() && github.event.inputs.dry_run != 'true'
        run: |
          echo "🎉 Test package deployment completed successfully!"
          echo "📦 Package: @${{ env.REPO_OWNER }}/prettier-plugin-tailwindcss-normalizer@${{ env.TEST_VERSION }}"
          echo "🔐 Access level: ${{ github.event.inputs.access_level }}"
          echo "🔗 GitHub Packages: https://github.com/${{ github.repository }}/packages"
          echo ""
          echo "📋 Download 'installation-guide' from Artifacts for installation instructions!"
